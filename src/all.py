import functools

print("Day 1a: " + str(max(map(lambda e: sum(map(lambda block: int(block), e.split("\n"))),open("1/1.input", "r").read().split("\n\n")))) + "\nDay 1b: " + str(sum(sorted(list(map(lambda e: sum(map(lambda block: int(block), e.split("\n"))),open("1/1.input", "r").read().split("\n\n"))))[-3:])) + "\nDay 2a: " + str(sum(map(lambda game: ((((ord(game.split(" ")[1]) - 86) % 3 - ord(game.split(" ")[0]) - 65)) % 3) * 3 + ord(game.split(" ")[1]) - 87, open("2/2.input", "r").read().splitlines()))) + "\nDay 2b: " + str(sum(map(lambda elem: 3 * (ord(elem.split(" ")[1]) - 88) + ((ord(elem.split(" ")[0]) - 65) + (ord(elem.split(" ")[1]) - 88) - 1) % 3 + 1, open("2/2.input", "r").read().splitlines()))) + "\nDay 3a: " + str(sum(map(lambda mismatch: mismatch - 96 if mismatch > 96 else mismatch - 38, map(lambda rucksack: ord(set(rucksack[:int(len(rucksack) / 2)]).intersection(set(rucksack[int(len(rucksack) / 2):])).pop()), open("3/3.input", "r").read().splitlines())))) + "\nDay 3b: " + str(sum(map(lambda badge: badge - 96 if badge > 96 else badge - 38, map(lambda rucksacks: ord(set(rucksacks[0]).intersection(set(rucksacks[1])).intersection(set(rucksacks[2])).pop()), list(open("3/3.input", "r").read().splitlines()[i:i+3] for i in range(0, len(open("3/3.input", "r").read().splitlines()), 3)))))) + "\nDay 4a: " + str(len([ranges for ranges in map(lambda line: list(map(lambda n: int(n), line.replace("-", ",").split(","))), open("4/4.input").read().splitlines()) if (ranges[0] >= ranges[2] and ranges[1] <= ranges[3]) or (ranges[0] <= ranges[2] and ranges[1] >= ranges[3])])) + "\nDay 4b: " + str(len([ranges for ranges in map(lambda line: list(map(lambda n: int(n), line.replace("-", ",").split(","))), open("4/4.input").read().splitlines()) if (ranges[0] >= ranges[2] and ranges[0] <= ranges[3]) or (ranges[0] <= ranges[2] and ranges[1] >= ranges[2])])) + "\nDay 5a: " + "".join(list(map(lambda containers: "".join(containers).strip(), list(zip(*map(lambda line: line[1::4], open("5/5.input", "r").read().split("\n\n")[0].splitlines()[:-1])))))[pos[0] - 1][pos[1]] for pos in list(functools.reduce(lambda current, movement: (([position[0], position[1] + movement[0]]) if movement[1] == position[0] else (([position[0], position[1] - movement[0]] if position[1] - movement[0] >= 0 else [movement[1], movement[0] - position[1] - 1]) if movement[2] == position[0] else (position)) for position in current), map(lambda str_nrs: [int(str_nrs.split()[1]), int(str_nrs.split()[3]), int(str_nrs.split()[5])],(reversed(open("5/5.input", "r").read().split("\n\n")[1].splitlines()))), [[i, 0] for i in range(1, 1 + int((len(open("5/5.input", "r").readline()) + 1) / 4))]))) + "\nDay 5b: " + "".join(list(map(lambda containers: "".join(containers).strip(), list(zip(*map(lambda line: line[1::4], open("5/5.input", "r").read().split("\n\n")[0].splitlines()[:-1])))))[pos[0] - 1][pos[1]] for pos in list(functools.reduce(lambda current, movement: (([position[0], position[1] + movement[0]]) if movement[1] == position[0] else (([movement[1], position[1]] if position[1] < movement[0] else [position[0], position[1] - movement[0]]) if movement[2] == position[0] else (position)) for position in current), map(lambda str_nrs: [int(str_nrs.split()[1]), int(str_nrs.split()[3]), int(str_nrs.split()[5])],(reversed(open("5/5.input", "r").read().split("\n\n")[1].splitlines()))), [[i, 0] for i in range(1, 1 + int((len(open("5/5.input", "r").readline()) + 1) / 4))]))))
# for explanations on this monstrosity visit the specific solutions. this file is just a combination of the form "\nDay Na: " and whatever the corresponding oneliner was